"""
@author Arpitkumar Patel (B00927071)
This code defines a Flask RESTful API with four endpoints for user registration, login, email checking, and password resetting. 
"""
from flask_restful import Resource
from flask import request
from application.business_logic.credential import Credential

"""
This is a Flask RESTful API endpoint for user registration. It receives a POST request with JSON data containing user credentials, and returns a response with the result of the registration attempt.
@return The response from the registration attempt.
"""
class RegistrationEndpoint(Resource):

    def post(self):
        data = request.get_json()
        response = Credential().signup(data)
        return response
"""
This is a Flask endpoint that handles a POST request to login a user. It takes in a JSON object containing user credentials, and returns a response object.
@return The response object.
"""
class LoginEndpoint(Resource):

    def post(self):
        data = request.get_json()
        response = Credential().login(data)
        return response
    
"""
    This is a Flask RESTful API endpoint that checks if an email exists in the database.
    The endpoint is accessed via a POST request and expects a JSON payload containing the email to be checked.
    The response is generated by calling the `checkEmail` method of the `Credential` class and returns the result of that method.
"""    
class CheckEmailExist(Resource):
   
    def post(self):
        data = request.get_json()
        response = Credential().checkEmail(data)
        return response
"""
    This is a Flask RESTful resource that sets a new password for a user.
    The resource listens for a POST request and expects a JSON payload containing the new password.
    It then passes the payload to the `setNewPassword` method of the `Credential` class and returns the response.
    The `Credential` class is not shown here, but it is assumed to have a `setNewPassword` method that takes a JSON payload and returns a response.
    This method is responsible for setting the new password for the user.
    @return The response from the setNewPassword method.
"""    
class SetNewPassword(Resource):
    
    def post(self):
        data = request.get_json()
        print(data)
        response = Credential().setNewPassword(data)
        return response